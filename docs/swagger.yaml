basePath: /v1
definitions:
  domain.User:
    properties:
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      id:
        type: string
      last_name:
        type: string
      updated_at:
        type: string
      username:
        type: string
    required:
    - id
    - updated_at
    type: object
  domain.UserAuthInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  domain.UserCreateInput:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      password_confirm:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - password_confirm
    - username
    type: object
  healthcheck.Status:
    properties:
      messages:
        items:
          type: string
        type: array
      name:
        type: string
      up:
        type: boolean
    type: object
info:
  contact: {}
  title: Beetle API
  version: "1.0"
paths:
  /healthcheck:
    get:
      operationId: v1-healthcheck
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/healthcheck.Status'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/healthcheck.Status'
      summary: Allows healthcheck of server in general and substatuses of various
        internal services
      tags:
      - test
  /tokens:
    post:
      description: Creates a new JWT auth token bearing the user's identity, which
        should be used to authorize further requests.
      operationId: v1-authtoken-create
      parameters:
      - description: Login form input
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/domain.UserAuthInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get a new authorization token via email and password
      tags:
      - auth
  /user:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.UserCreateInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create a new user
      tags:
      - user
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Get a user's details by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - JWTToken: []
      summary: Get a user by ID
      tags:
      - user
securityDefinitions:
  JWTToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
