package router

import (
	_ "beetle/docs" // Generated by `swag init`
	"beetle/internal/config"
	"beetle/internal/handler"

	echojwt "github.com/labstack/echo-jwt/v4"
	"github.com/labstack/echo/v4"
)

type routeProvider interface {
	AddPublicRoutes(g *echo.Group, config config.Config)
	AddPrivateRoutes(g *echo.Group, config config.Config)
}

type Router struct {
	RouteProviders []routeProvider
	Config         config.Config
}

func New(config config.Config, userHandler *handler.UserHandler) *Router {
	return &Router{
		RouteProviders: []routeProvider{
			&tokenRouteProvider{},
			&healthcheckRouteProvider{},
			NewUserRouteProvider(userHandler),
		},
		Config: config,
	}
}

// AddRoutes adds all routes to the Echo instance
func (r *Router) AddRoutes(e *echo.Echo) {
	v1public := e.Group("/v1")
	v1private := e.Group("/v1", r.getAuthMiddleware())

	// Add public routes
	for _, rp := range r.RouteProviders {
		rp.AddPublicRoutes(v1public, r.Config)
	}

	// Add private routes
	for _, rp := range r.RouteProviders {
		rp.AddPrivateRoutes(v1private, r.Config)
	}

	AddSwaggerRoutes(e, r.Config)

	// Add root routes
	e.GET("/", HomeHandler)
}

func (r *Router) getAuthMiddleware() echo.MiddlewareFunc {
	return echojwt.WithConfig(echojwt.Config{
		SigningKey: []byte(r.Config.Auth.Secret),
	})
}

// HomeHandler handles the root endpoint
func HomeHandler(c echo.Context) error {
	return c.JSON(200, map[string]string{"message": "Welcome to the Beetle API"})
}

// HealthCheckHandler handles the health check endpoint
func HealthCheckHandler(c echo.Context) error {
	return c.JSON(200, map[string]string{"status": "healthy"})
}
